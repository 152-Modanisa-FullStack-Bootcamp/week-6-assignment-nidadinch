// Code generated by MockGen. DO NOT EDIT.
// Source: data/data.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	data "week-6-assingment-nidadinch/data"

	gomock "github.com/golang/mock/gomock"
)

// MockIData is a mock of IData interface.
type MockIData struct {
	ctrl     *gomock.Controller
	recorder *MockIDataMockRecorder
}

// MockIDataMockRecorder is the mock recorder for MockIData.
type MockIDataMockRecorder struct {
	mock *MockIData
}

// NewMockIData creates a new mock instance.
func NewMockIData(ctrl *gomock.Controller) *MockIData {
	mock := &MockIData{ctrl: ctrl}
	mock.recorder = &MockIDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIData) EXPECT() *MockIDataMockRecorder {
	return m.recorder
}

// AddWallet mocks base method.
func (m *MockIData) AddWallet(username string, initialBalanceAmount int) (*data.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWallet", username, initialBalanceAmount)
	ret0, _ := ret[0].(*data.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWallet indicates an expected call of AddWallet.
func (mr *MockIDataMockRecorder) AddWallet(username, initialBalanceAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWallet", reflect.TypeOf((*MockIData)(nil).AddWallet), username, initialBalanceAmount)
}

// GetAllWallets mocks base method.
func (m *MockIData) GetAllWallets() ([]*data.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWallets")
	ret0, _ := ret[0].([]*data.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWallets indicates an expected call of GetAllWallets.
func (mr *MockIDataMockRecorder) GetAllWallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWallets", reflect.TypeOf((*MockIData)(nil).GetAllWallets))
}

// GetWallet mocks base method.
func (m *MockIData) GetWallet(username string) (*data.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", username)
	ret0, _ := ret[0].(*data.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockIDataMockRecorder) GetWallet(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockIData)(nil).GetWallet), username)
}

// NewWallet mocks base method.
func (m *MockIData) NewWallet(wallet *data.Wallet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NewWallet", wallet)
}

// NewWallet indicates an expected call of NewWallet.
func (mr *MockIDataMockRecorder) NewWallet(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWallet", reflect.TypeOf((*MockIData)(nil).NewWallet), wallet)
}

// Update mocks base method.
func (m *MockIData) Update(username string, amount int) (*data.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", username, amount)
	ret0, _ := ret[0].(*data.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIDataMockRecorder) Update(username, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIData)(nil).Update), username, amount)
}
