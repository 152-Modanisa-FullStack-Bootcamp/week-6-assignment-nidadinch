// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "week-6-assingment-nidadinch/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletsService is a mock of IWalletsService interface.
type MockIWalletsService struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletsServiceMockRecorder
}

// MockIWalletsServiceMockRecorder is the mock recorder for MockIWalletsService.
type MockIWalletsServiceMockRecorder struct {
	mock *MockIWalletsService
}

// NewMockIWalletsService creates a new mock instance.
func NewMockIWalletsService(ctrl *gomock.Controller) *MockIWalletsService {
	mock := &MockIWalletsService{ctrl: ctrl}
	mock.recorder = &MockIWalletsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletsService) EXPECT() *MockIWalletsServiceMockRecorder {
	return m.recorder
}

// CreateWalletByUsername mocks base method.
func (m *MockIWalletsService) CreateWalletByUsername(username string) (*model.WalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletByUsername", username)
	ret0, _ := ret[0].(*model.WalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWalletByUsername indicates an expected call of CreateWalletByUsername.
func (mr *MockIWalletsServiceMockRecorder) CreateWalletByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletByUsername", reflect.TypeOf((*MockIWalletsService)(nil).CreateWalletByUsername), username)
}

// GetWalletByUsername mocks base method.
func (m *MockIWalletsService) GetWalletByUsername(username string) (*model.WalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUsername", username)
	ret0, _ := ret[0].(*model.WalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUsername indicates an expected call of GetWalletByUsername.
func (mr *MockIWalletsServiceMockRecorder) GetWalletByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUsername", reflect.TypeOf((*MockIWalletsService)(nil).GetWalletByUsername), username)
}

// UpdateWalletByUsername mocks base method.
func (m *MockIWalletsService) UpdateWalletByUsername(username string, amount int) (*model.WalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletByUsername", username, amount)
	ret0, _ := ret[0].(*model.WalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletByUsername indicates an expected call of UpdateWalletByUsername.
func (mr *MockIWalletsServiceMockRecorder) UpdateWalletByUsername(username, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletByUsername", reflect.TypeOf((*MockIWalletsService)(nil).UpdateWalletByUsername), username, amount)
}

// Wallets mocks base method.
func (m *MockIWalletsService) Wallets() (*model.WalletsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].(*model.WalletsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallets indicates an expected call of Wallets.
func (mr *MockIWalletsServiceMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockIWalletsService)(nil).Wallets))
}
